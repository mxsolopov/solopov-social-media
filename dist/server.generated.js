(()=>{"use strict";var e={779:e=>{e.exports=require("express-jwt")}},t={};function r(s){var o=t[s];if(void 0!==o)return o.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{r.r(s);const e=require("path");var t=r.n(e);const o=require("express");var a=r.n(o);const n=require("mongoose");var i=r.n(n);const d={env:"production",port:process.env.PORT||3e3,jwtSecret:process.env.JWT_SECRET||"mxsolopov",mongoUri:process.env.MONGODB_URI||process.env.MONGO_HOST||"mongodb+srv://mxsolopov:z8a-KjZ-Hj3-zJx@solopov-social-network.k7xni6h.mongodb.net/?retryWrites=true&w=majority",staticPath:"E:\\Projects\\Frontend\\solopov-social-media\\server\\static"},u=require("body-parser");var l=r.n(u);const c=require("cookie-parser");var p=r.n(c);const y=require("compression");var m=r.n(y);const h=require("cors");var w=r.n(h);const f=require("helmet");var g=r.n(f);const v=require("crypto");var j=r.n(v);const b=new(i().Schema)({name:{type:String,trim:!0,required:"Name is required"},email:{type:String,trim:!0,unique:"Email already exists",match:[/.+\@.+\..+/,"Please fill a valid email address"],required:"Email is required"},hashed_password:{type:String,required:"Password is required"},about:{type:String,default:"Напишите о себе",trim:!0},avatar:{type:String,default:"avatar-template-mx.png"},salt:String,updated:Date,created:{type:Date,default:Date.now},following:[{type:i().Schema.ObjectId,ref:"User"}],followers:[{type:i().Schema.ObjectId,ref:"User"}]});b.virtual("password").set((function(e){this._password=e,this.salt=this.makeSalt(),this.hashed_password=this.encryptPassword(e)})).get((function(){return this._password})),b.path("hashed_password").validate((function(e){this._password&&this._password.length<6&&this.invalidate("password","Password must be at least 6 characters."),this.isNew&&!this._password&&this.invalidate("password","Password is required")}),null),b.methods={authenticate:function(e){return this.encryptPassword(e)===this.hashed_password},encryptPassword:function(e){if(!e)return"";try{return j().createHmac("sha1",this.salt).update(e).digest("hex")}catch(e){return""}},makeSalt:function(){return Math.round((new Date).valueOf()*Math.random())+""}};const I=i().model("User",b),S=require("lodash/extend");var q=r.n(S);const _=e=>{let t="";if(e.code)switch(e.code){case 11e3:case 11001:t=(e=>{let t;try{let r=e.message.substring(e.message.lastIndexOf(".$")+2,e.message.lastIndexOf("_1"));t=r.charAt(0).toUpperCase()+r.slice(1)+" already exists"}catch(e){t="Unique field already exists"}return t})(e);break;default:t="Something went wrong"}else for(let r in e.errors)e.errors[r].message&&(t=e.errors[r].message);return t},x=require("fs");var U=r.n(x);const O=require("jsonwebtoken");var k=r.n(O);const{expressjwt:P}=r(779),A={signin:async(e,t)=>{try{const r=await I.findOne({email:e.body.email});if(!r)return t.status(401).json({error:"User not found"});if(!r.authenticate(e.body.password))return t.status(401).send({error:"Email and password don't match"});const s=k().sign({_id:r._id},d.jwtSecret);return t.cookie("t",s,{expire:new Date+9999}),t.json({token:s,user:{_id:r._id,name:r.name,email:r.email}})}catch(e){return t.status(401).json({error:"Could not sign in"})}},signout:(e,t)=>(t.clearCookie("t"),t.status(200).json({message:"signed out"})),requireSignin:P({secret:d.jwtSecret,userProperty:"auth",algorithms:["HS256"]}),hasAuthorization:(e,t,r)=>{if(!e.profile||!e.auth||e.profile._id!=e.auth._id)return t.status(403).json({error:"User is not authorized"});r()}},B=require("multer");var D=r.n(B);const $=a().Router();$.route("/api/users").get((async(e,t)=>{try{const e=await I.find().select("name email updated avatar created followers following");t.json(e)}catch(e){return t.status(400).json({error:_(e)})}})).post((async(e,t)=>{const r=new I(e.body);try{return await r.save(),t.status(200).json({message:"Successfully signed up"})}catch(e){return t.status(400).json({error:_(e)})}}));const M=D().diskStorage({destination:function(e,t,r){r(null,d.staticPath+"\\avatars")},filename:function(e,t,r){r(null,Date.now()+"-"+t.originalname)}}),z=D()({storage:M});$.route("/api/avatar/:userId").put(z.single("avatar"),(async(e,t)=>{const r=e.file.filename,s=e.params.userId;try{await I.findOneAndUpdate({_id:s},{avatar:r,updated:Date.now()}),t.status(201).json({success:!0,avatarFileName:r,id:s})}catch(e){return t.status(400).json({error:e})}})),$.route("/api/avatar/:filename").delete(A.requireSignin,(async(e,r)=>{const{filename:s}=e.params,o=process.cwd(),a=t().join(o,`server/static/avatars/${s}`);U().access(a,U().constants.F_OK,(e=>{e?(console.error("Avatar does not exist:",e),r.status(404).json({error:"Avatar does not exist"})):U().unlink(a,(e=>{e?(console.error("Failed to delete avatar:",e),r.status(500).json({error:"Failed to delete avatar"})):r.status(200).json({message:"Avatar deleted"})}))}))})),$.route("/api/users/follow").put(A.requireSignin,(async(e,t,r)=>{try{await I.findByIdAndUpdate(e.body.userId,{$push:{following:e.body.followId}}),r()}catch(e){return t.status(400).json({error:_(e)})}}),(async(e,t)=>{try{let r=await I.findByIdAndUpdate(e.body.followId,{$push:{followers:e.body.userId}},{new:!0}).populate("following","_id name").populate("followers","_id name").exec();r.hashed_password=void 0,r.salt=void 0,t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})),$.route("/api/users/unfollow").put(A.requireSignin,(async(e,t,r)=>{try{await I.findByIdAndUpdate(e.body.userId,{$pull:{following:e.body.unfollowId}}),r()}catch(e){return t.status(400).json({error:_(e)})}}),(async(e,t)=>{try{let r=await I.findByIdAndUpdate(e.body.unfollowId,{$pull:{followers:e.body.userId}},{new:!0}).populate("following","_id name").populate("followers","_id name").exec();r.hashed_password=void 0,r.salt=void 0,t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})),$.route("/api/users/:userId").get(A.requireSignin,((e,t)=>(e.profile.hashed_password=void 0,e.profile.salt=void 0,t.json(e.profile)))).put(A.requireSignin,A.hasAuthorization,(async(e,t)=>{try{let r=e.profile;r=q()(r,e.body),r.updated=Date.now(),await r.save(),e.profile.hashed_password=void 0,e.profile.salt=void 0,t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})).delete(A.requireSignin,A.hasAuthorization,(async(e,t)=>{try{let r=e.profile,s=await r.remove();s.hashed_password=void 0,s.salt=void 0,t.json(s)}catch(e){return t.status(400).json({error:_(e)})}})),$.param("userId",(async(e,t,r,s)=>{try{const o=await I.findById(s).populate("following","_id name").populate("followers","_id name");if(!o)return t.status(400).json({error:"User not found"});e.profile=o,r()}catch(e){return t.status(400).json({error:"Could not retrieve user"})}}));const E=$,C=a().Router();C.route("/auth/signin").post(A.signin),C.route("/auth/signout").get(A.signout);const T=C,R=new(i().Schema)({title:{type:String,required:"Title is required"},text:{type:String,required:"Text is required"},likes:[{type:i().Schema.ObjectId,ref:"User"}],dislikes:[{type:i().Schema.ObjectId,ref:"User"}],comments:[{_id:{type:String},text:{type:String},created:{type:Date,default:Date.now},postedBy:{type:i().Schema.ObjectId,ref:"User"}}],postedBy:{type:i().Schema.ObjectId,ref:"User"},created:{type:Date,default:Date.now}}),F=i().model("Post",R),H=a().Router();H.route("/api/posts/new/:userId").post(A.requireSignin,(async(e,t)=>{const r=new F(e.body);try{return await r.save(),t.status(200).json(r)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/feed/:userId").get(A.requireSignin,(async(e,t)=>{try{const r=(await I.findById(e.params.userId).select("following").exec()).following;r.push(e.params.userId);let s=await F.find({postedBy:{$in:r}}).populate("comments.postedBy","_id name avatar").populate("postedBy","_id name avatar").sort("-created").exec();t.status(200).json(s)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/:postId").delete(A.requireSignin,(async(e,t)=>{try{const r=e.params.postId;await F.deleteOne({_id:r}),t.status(200).json("Post deleted")}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/user/:userId").delete(A.requireSignin,(async(e,t)=>{try{const r=e.params.userId;await F.deleteMany({postedBy:r}),t.status(200).json("Posts deleted")}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/:postId/:commentId").delete(A.requireSignin,(async(e,t)=>{try{const{postId:r,commentId:s}=e.params;if(console.log(r,s),!await F.findByIdAndUpdate(r,{$pull:{comments:{_id:s}}},{new:!0}))return t.status(404).json({error:"Post not found"});t.status(200).json({message:"Comment deleted"})}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/comment").put(A.requireSignin,(async(e,t)=>{try{const r=e.body.postId,s=e.body.comment,o=await F.findByIdAndUpdate(r,{$push:{comments:s}},{new:!0});if(!o)return t.status(404).json({error:"Post not found"});t.status(200).json(o)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/like").put(A.requireSignin,(async(e,t)=>{try{let r=await F.findByIdAndUpdate(e.body.postId,{$push:{likes:e.body.userId}},{new:!0});t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/removelike").put(A.requireSignin,(async(e,t)=>{try{let r=await F.findByIdAndUpdate(e.body.postId,{$pull:{likes:e.body.userId}},{new:!0});t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/dislike").put(A.requireSignin,(async(e,t)=>{try{let r=await F.findByIdAndUpdate(e.body.postId,{$push:{dislikes:e.body.userId}},{new:!0});t.json(r)}catch(e){return t.status(400).json({error:_(e)})}})),H.route("/api/posts/removedislike").put(A.requireSignin,(async(e,t)=>{try{let r=await F.findByIdAndUpdate(e.body.postId,{$pull:{dislikes:e.body.userId}},{new:!0});t.json(r)}catch(e){return t.status(400).json({error:_(e)})}}));const N=H,K=a()(),G=l().json();K.use(a().json({limit:"50mb"})),K.use(a().urlencoded({limit:"50mb",extended:!0,parameterLimit:5e4})),K.use(p()()),K.use(m()()),K.use(g()()),K.use(w()()),K.use("/",G,E),K.use("/",G,T),K.use("/",G,N),K.use(((e,t,r,s)=>{"UnauthorizedError"===e.name?r.status(401).json({error:e.name+": "+e.message}):e&&(r.status(400).json({error:e.name+": "+e.message}),console.log(e))}));const W=K,J=process.cwd();W.use(a().static(t().join(J,"server/static"))),W.get("/*",((e,t)=>{t.status(200).type("html").send(L)})),W.listen(d.port,(e=>{e&&console.log(e),console.info("Server started on port %s.",d.port)})),i().Promise=global.Promise,i().set("strictQuery",!1),i().connect(d.mongoUri,{}),i().connection.on("error",(()=>{throw new Error(`unable to connect to database: ${d.mongoUri}`)}));const L='<!doctype html>\n<html lang="ru">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Solopov Social Network</title>\n    <link\n      rel="stylesheet"\n      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"\n      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"\n      crossorigin="anonymous"\n    />\n  </head>\n  <body>\n    <div id="root"></div>\n    <script src="/dist/bundle.js"><\/script>\n  </body>\n</html>'})(),module.exports=s})();